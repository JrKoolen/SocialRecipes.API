name: CI/CD Pipeline
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:

  lighthouse:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        working-directory: ./Frontend
        run: npm install

      - name: Start Server
        working-directory: ./Frontend
        run: npm run start &

      - name: Run Lighthouse Tests
        working-directory: ./Frontend
        run: | 
          npx lighthouse http://localhost:3000 --output html --output-path lighthouse-report.html --chrome-flags="--headless" --only-categories=performance --only-categories=accessibility --only-categories=best-practices --only-categories=seo

      - name: List Files in Reports Directory
        working-directory: ./Frontend
        run: |
          echo "Contents of the reports directory:"
          ls
          ls -R uploads

      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-report-json
          path: uploads/lighthouse-report.json

  Build-and-test-API:
    name: Build and Test API
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore
      
    - name: Test
      run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: TestResults
        path: test-results.trx
  

  Qunit-Frontend-Tests:
    name: Qunit Frontend Tests
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Dependencies
        working-directory: ./Frontend
        run: npm install

      - name: Run QUnit Tests
        working-directory: ./Frontend
        run: npx qunit
        
  build-and-test-docker-frontend:
    name: Docker compose build & cypress
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Debug Directory Structure
      run: |
        pwd
        ls -la /home/runner/work
        ls -la SocialRecipes.Tests
        ls -la /home/runner/work/SocialRecipes.API/Frontend || echo "Frontend directory not found"

    - name: Move to Root Directory
      run: |
        cd /home/runner/work/SocialRecipes.API  
        pwd
        ls -la SocialRecipes.API

    - name: Remove Conflicting Docker Packages
      run: |
        sudo apt-get remove -y containerd docker docker.io docker-ce docker-ce-cli containerd.io
        sudo apt-get autoremove -y
        sudo rm -rf /var/lib/docker /var/lib/containerd

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo docker version

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version

    - name: List Current Directory Contents
      run: |
        ls -la

    - name: Set up Docker Compose
      run: |
        docker-compose down || true
        docker-compose up -d --build

    - name: Wait for Services to Be Ready
      run: 
        sleep 10
        
    - name: Check API Logs
      run: docker-compose logs api

    - name: Install Xvfb
      run: sudo apt-get install -y xvfb

    - name: Run Cypress Tests
      uses: cypress-io/github-action@v5
      with:
        working-directory: ./Frontend
        config: baseUrl=http://localhost:3000
        wait-on: http://localhost:3000
        browser: chrome

    - name: Stop Docker Compose Services
      run: |
        docker-compose down

  build-and-deploy:
    needs: 
      - Build-and-test-API
      - build-and-test-docker-frontend
      - Qunit-Frontend-Tests
    name: Build and Deploy to azure container instances
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Log in to ACR
        run: |
          az acr login --name SocialRecipes

      - name: Docker Login to ACR
        run: |
          echo ${{ secrets.AZURE_ACR_PASSWORD }} | docker login SocialRecipes.azurecr.io --username ${{ secrets.AZURE_ACR_USERNAME }} --password-stdin

      - name: Build and Push API Image
        run: |
          docker build -f Dockerfile -t SocialRecipes.azurecr.io/socialrecipes-api:${{ github.sha }} .
          docker push SocialRecipes.azurecr.io/socialrecipes-api:${{ github.sha }}

      - name: Build and Push Frontend Image
        run: |
          docker build -f ./Frontend/Dockerfile -t SocialRecipes.azurecr.io/socialrecipes-frontend:${{ github.sha }} ./Frontend
          docker push SocialRecipes.azurecr.io/socialrecipes-frontend:${{ github.sha }}

      - name: Build and Push Database Image
        run: |
          docker build -f ./db/Dockerfile -t SocialRecipes.azurecr.io/socialrecipes-database:${{ github.sha }} ./db
          docker push SocialRecipes.azurecr.io/socialrecipes-database:${{ github.sha }}

      - name: Deploy API to ACI
        run: |
          az container create \
          --resource-group SocialRecipes \
          --name socialrecipes-api \
          --image socialrecipes.azurecr.io/socialrecipes-api:${{ github.sha }} \
          --cpu 1 \
          --memory 1.5 \
          --os-type Linux \
          --registry-login-server socialrecipes.azurecr.io \
          --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
          --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
          --dns-name-label socialrecipes-api-${{ github.sha }} \
          --ports 8080 \
          --protocol TCP \
          --ip-address Public \
  
      - name: Deploy Frontend to ACI
        run: |
          az container create \
          --resource-group SocialRecipes \
          --name socialrecipes-frontend \
          --image socialrecipes.azurecr.io/socialrecipes-frontend:${{ github.sha }} \
          --cpu 1 \
          --memory 1.5 \
          --os-type Linux \
          --registry-login-server socialrecipes.azurecr.io \
          --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
          --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
          --dns-name-label socialrecipes-frontend-${{ github.sha }} \
          --ports 3000 \
          --protocol TCP \
          --ip-address Public \
          --debug

      - name: Deploy Database to ACI
        run: |
          az container create \
          --resource-group SocialRecipes \
          --name socialrecipes-database \
          --image socialrecipes.azurecr.io/socialrecipes-database:${{ github.sha }} \
          --cpu 1 \
          --memory 2.0 \
          --os-type Linux \
          --registry-login-server socialrecipes.azurecr.io \
          --registry-username ${{ secrets.AZURE_ACR_USERNAME }} \
          --registry-password ${{ secrets.AZURE_ACR_PASSWORD }} \
          --dns-name-label socialrecipes-database-${{ github.sha }} \
          --ports 3006 \
          --environment-variables POSTGRES_USER=root POSTGRES_PASSWORD=rootpassword POSTGRES_DB=socialrecipesdb \
          --debug