name: CI/CD Pipeline
# test
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  Build-and-test-API:
    name: Build and Test API
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx"

    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: TestResults
        path: test-results.trx


  build-and-test-docker-frontend:
    name: Build and Test frontend & docker
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Debug Directory Structure
      run: |
        pwd
        ls -la /home/runner/work
        ls -la SocialRecipes.Tests
        ls -la /home/runner/work/SocialRecipes.API/Frontend || echo "Frontend directory not found"

    - name: Move to Root Directory
      run: |
        cd /home/runner/work/SocialRecipes.API  
        pwd
        ls -la SocialRecipes.API



    - name: Remove Conflicting Docker Packages
      run: |
        sudo apt-get remove -y containerd docker docker.io docker-ce docker-ce-cli containerd.io
        sudo apt-get autoremove -y
        sudo rm -rf /var/lib/docker /var/lib/containerd

    - name: Install Docker
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          apt-transport-https \
          ca-certificates \
          curl \
          software-properties-common
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        sudo docker version

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version

    - name: List Current Directory Contents
      run: |
        ls -la

    - name: Set up Docker Compose
      run: |
        docker-compose down || true
        docker-compose up -d --build

    - name: Wait for Services to Be Ready
      run: 
        sleep 10
        
    - name: Check API Logs
      run: docker-compose logs api

    - name: Install Xvfb
      run: sudo apt-get install -y xvfb

    - name: Run Cypress Tests
      uses: cypress-io/github-action@v5
      with:
        working-directory: ./Frontend
        config: baseUrl=http://localhost:3000
        wait-on: http://localhost:3000
        browser: chrome

    - name: Stop Docker Compose Services
      run: |
        docker-compose down

 #   - name: Merge to Release Branch
 #     run: |
 #       git config user.name "github-actions[bot]"
 #       git config user.email "github-actions[bot]@users.noreply.github.com"
 #       git checkout release
 #       git merge master -m "CI/CD: Merge master into release [skip ci]"
 #       git push origin release


  update-docker:
    name: Update Docker
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        run: |
          az acr login --name <your-acr-name>

      # Build and Push API Docker Image
      - name: Build and Push API Image
        run: |
          docker build -f Dockerfile -t <your-acr-name>.azurecr.io/socialrecipes-api:${{ github.sha }} .
          docker push <your-acr-name>.azurecr.io/socialrecipes-api:${{ github.sha }}

      # Build and Push Frontend Docker Image
      - name: Build and Push Frontend Image
        run: |
          docker build -f ./Frontend/Dockerfile -t <your-acr-name>.azurecr.io/socialrecipes-frontend:${{ github.sha }} ./Frontend
          docker push <your-acr-name>.azurecr.io/socialrecipes-frontend:${{ github.sha }}

      # Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Configure Kubernetes context
      - name: Configure AKS context
        uses: azure/aks-set-context@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cluster-name: <your-cluster-name>
          resource-group: <your-resource-group>

      # Deploy to AKS
      - name: Deploy to AKS
        run: |
          kubectl set image deployment/api-deployment api=<your-acr-name>.azurecr.io/socialrecipes-api:${{ github.sha }}
          kubectl set image deployment/frontend-deployment frontend=<your-acr-name>.azurecr.io/socialrecipes-frontend:${{ github.sha }}
          kubectl rollout status deployment/api-deployment
          kubectl rollout status deployment/frontend-deployment